'use client';

import { useState, useCallback, useEffect } from 'react';
import { getUserThemeApi, updateUserThemeApi } from '@/core/apis/Account';
import { useGetActiveGroup } from '@/app/providers/UnifiedGroupProvider';
import { useTheme } from '@/common/features/theme-customizer/hooks/useTheme';
import { useSession } from 'next-auth/react';
import CustomToast from '@/components/Toast/CustomToast';

// Utility functions and constants
const isValidObjectId = (id) => id && /^[0-9a-fA-F]{24}$/.test(id);

const DEFAULT_THEME = {
  primaryColor: '#145FFF',
  mode: 'light',
  interfaceStyle: 'default',
  contentLayout: 'compact',
};

/**
 * Custom hook to manage user theme preferences
 * Handles theme fetching and updating with proper error handling
 */
const useUserTheme = () => {
  const [theme, setTheme] = useState(DEFAULT_THEME);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isInitialized, setIsInitialized] = useState(false);
  const { userID, id: activeGroupId, activeGroup } = useGetActiveGroup();

  // Get current theme context values
  const {
    theme: currentThemeMode,
    primaryColor: currentPrimaryColor,
    skin: currentSkin,
    layout: currentLayout,
  } = useTheme();
  const { status } = useSession();

  const mapThemeContextToApiFormat = useCallback(() => ({
    primaryColor: currentPrimaryColor || DEFAULT_THEME.primaryColor,
    mode: currentThemeMode || DEFAULT_THEME.mode,
    interfaceStyle: currentSkin || DEFAULT_THEME.interfaceStyle,
    contentLayout: currentLayout || DEFAULT_THEME.contentLayout,
  }), [currentPrimaryColor, currentThemeMode, currentSkin, currentLayout]);

  const fetchUserTheme = useCallback(async () => {
    if (!userID || !isValidObjectId(userID)) {
      setError('Invalid or missing user ID for fetching theme');
      setIsInitialized(true);
      return;
    }

    if (!activeGroupId || !isValidObjectId(activeGroupId)) {
      setError('Invalid or missing group ID for fetching theme');
      setIsInitialized(true);
      return;
    }

    if (!activeGroup) {
      setError('Active group data is not available');
      setIsInitialized(true);
      return;
    }

    try {
      setLoading(true);
      setError(null);

      let setupTheme = null;
      if (typeof window !== 'undefined') {
        const storedTheme = window.sessionStorage.getItem('userTheme');
        const isLoaded = window.sessionStorage.getItem('userThemeLoaded');
        if (storedTheme && isLoaded === 'true') {
          setupTheme = JSON.parse(storedTheme);
          window.sessionStorage.removeItem('userThemeLoaded');
        }
      }

      if (setupTheme) {
        setTheme({ ...DEFAULT_THEME, ...setupTheme });
      } else {
        const response = await getUserThemeApi(userID, activeGroupId);
        setTheme(response?.success && response?.data 
          ? { ...DEFAULT_THEME, ...response.data }
          : DEFAULT_THEME
        );
      }
    } catch (err) {
      setError(err.message || 'Failed to fetch user theme');
      setTheme(DEFAULT_THEME);
    } finally {
      setLoading(false);
      setIsInitialized(true);
    }
  }, [userID, activeGroupId, activeGroup]);

  const updateUserTheme = useCallback(async (themeSettings, options = {}) => {
    const {
      showToast = true,
      successMessage = 'Theme updated successfully',
    } = options;

    if (!userID || !isValidObjectId(userID)) {
      const errorMessage = 'Invalid user ID for updating theme';
      setError(errorMessage);
      showToast && CustomToast({ message: errorMessage, type: 'error' });
      return false;
    }

    if (!activeGroup || !activeGroupId || !isValidObjectId(activeGroupId)) {
      const errorMessage = 'Invalid group ID for updating theme';
      setError(errorMessage);
      showToast && CustomToast({ message: errorMessage, type: 'error' });
      return false;
    }

    if (!themeSettings || typeof themeSettings !== 'object') {
      const errorMessage = 'Invalid theme settings provided';
      setError(errorMessage);
      showToast && CustomToast({ message: errorMessage, type: 'error' });
      return false;
    }

    try {
      setLoading(true);
      setError(null);

      const currentThemeData = mapThemeContextToApiFormat();
      const updatedTheme = {
        ...theme,
        ...currentThemeData,
        ...themeSettings,
      };

      const response = await updateUserThemeApi(
        userID,
        activeGroupId,
        theme,
        updatedTheme,
      );

      if (response?.success) {
        setTheme(updatedTheme);
        showToast && CustomToast({ message: successMessage, type: 'success' });
        return true;
      }
      
      throw new Error(response?.message || 'Failed to update theme');
    } catch (err) {
      const errorMessage = err.message || 'Failed to update user theme';
      setError(errorMessage);
      showToast && CustomToast({ message: errorMessage, type: 'error' });
      return false;
    } finally {
      setLoading(false);
    }
  }, [userID, activeGroupId, activeGroup, theme, mapThemeContextToApiFormat]);

  const resetToDefault = useCallback(() => (
    updateUserTheme(DEFAULT_THEME, {
      successMessage: 'Theme reset to default successfully',
    })
  ), [updateUserTheme]);

  const updatePrimaryColor = useCallback((primaryColor) => (
    updateUserTheme({ primaryColor }, {
      successMessage: 'Primary color updated successfully'
    })
  ), [updateUserTheme]);

  const updateThemeMode = useCallback((mode) => (
    updateUserTheme({ mode }, {
      successMessage: `Theme mode changed to ${mode}`
    })
  ), [updateUserTheme]);

  const updateInterfaceStyle = useCallback((interfaceStyle) => (
    updateUserTheme({ interfaceStyle }, {
      successMessage: `Interface style changed to ${interfaceStyle}`
    })
  ), [updateUserTheme]);

  const updateContentLayout = useCallback((contentLayout) => (
    updateUserTheme({ contentLayout }, {
      successMessage: `Content layout changed to ${contentLayout}`
    })
  ), [updateUserTheme]);

  // Effect: Reset theme state on group change
  useEffect(() => {
    if (activeGroupId && isValidObjectId(activeGroupId)) {
      setIsInitialized(false);
      setTheme(DEFAULT_THEME);
    }
  }, [activeGroupId]);

  // Effect: Fetch theme when needed
  useEffect(() => {
    let isSubscribed = true;

    const shouldFetchTheme =
      status === 'authenticated' &&
      userID &&
      activeGroupId &&
      activeGroup &&
      isValidObjectId(userID) &&
      isValidObjectId(activeGroupId) &&
      !isInitialized;

    if (shouldFetchTheme && isSubscribed) {
      fetchUserTheme();
    }

    return () => {
      isSubscribed = false;
    };
  }, [status, userID, activeGroupId, activeGroup, isInitialized, fetchUserTheme]);

  // Effect: Listen for force theme refresh events
  useEffect(() => {
    const handleForceThemeRefresh = (event) => {
      if (event.detail?.groupId === activeGroupId) {
        setIsInitialized(false);
      }
    };

    window.addEventListener('force-theme-refresh', handleForceThemeRefresh);
    return () => {
      window.removeEventListener('force-theme-refresh', handleForceThemeRefresh);
    };
  }, [activeGroupId]);

  const safeTheme = theme || DEFAULT_THEME;

  return {
    theme: safeTheme,
    loading,
    error,
    isInitialized,
    fetchUserTheme,
    updateUserTheme,
    resetToDefault,
    updatePrimaryColor,
    updateThemeMode,
    updateInterfaceStyle,
    updateContentLayout,
    isLight: safeTheme.mode === 'light',
    isDark: safeTheme.mode === 'dark',
    isSystem: safeTheme.mode === 'system',
    isDefault: safeTheme.interfaceStyle === 'default',
    isBordered: safeTheme.interfaceStyle === 'bordered',
    isCompact: safeTheme.contentLayout === 'compact',
    isWide: safeTheme.contentLayout === 'wide',
  };
};

export default useUserTheme;
